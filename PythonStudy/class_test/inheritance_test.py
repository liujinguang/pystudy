#/usr/bin/python
# -*- coding: UTF-8 -*-

'''
Created on Jun 19, 2017

@author: bob
'''

'''
In Python, inheritance happens when an object is qualified, and it involves searching
an attribute definition tree (one or more namespaces). Every time you use an expression
of the form object.attr (where object is an instance or class object), Python searches
the namespace tree from bottom to top, beginning with object, looking for the first
attr it can find. This includes references to self attributes in your methods. Because
lower definitions in the tree override higher ones, inheritance forms the basis of
specialization.

Generally:
? Instance attributes are generated by assignments to self attributes in methods.
? Class attributes are created by statements (assignments) in class statements.
? Superclass links are made by listing classes in parentheses in a class statement
header.
The net result is a tree of attribute namespaces that leads from an instance, to the class
it was generated from, to all the superclasses listed in the class header.

The tree-searching model of inheritance just described turns out to be a great way to
specialize systems. Because inheritance finds names in subclasses before it checks superclasses,
subclasses can replace default behavior by redefining their superclasses?¡¥
attributes.
'''

class Super(object):
    def method(self):
        print "in Super.method"
        
        
class Sub(Super):
    def method(self):
        print "start Sub.method"
        Super.method(self)
        print "end Sub.method"

if __name__ == '__main__':
    x = Super()
    x.method()
    
    y = Sub()
    y.method()
    
    
    